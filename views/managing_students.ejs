<div class="bg-white p-6 rounded-lg shadow-md">
    <h2 class="text-2xl font-semibold text-gray-700 mb-4">Students</h2>

    <!-- Search Bar -->
    <input type="text" data-bind="value: searchQuery, valueUpdate: 'input'" 
        placeholder="Search by ID or Name" 
        class="w-full p-2 mb-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">

    <!-- Student Table -->
    <div class="overflow-x-auto">
        <table class="w-full border-collapse border border-gray-300">
            <thead>
                <tr class="bg-gray-200">
                    <th class="border border-gray-300 px-4 py-2">ID</th>
                    <th class="border border-gray-300 px-4 py-2">Name</th>
                    <th class="border border-gray-300 px-4 py-2">Phone</th>
                    <th class="border border-gray-300 px-4 py-2">Email</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: filteredStudents">
                <tr class="bg-white hover:bg-gray-100">
                    <td class="border border-gray-300 px-4 py-2" data-bind="text: id"></td>
                    <td class="border border-gray-300 px-4 py-2" data-bind="text: name"></td>
                    <td class="border border-gray-300 px-4 py-2" data-bind="text: phone"></td>
                    <td class="border border-gray-300 px-4 py-2" data-bind="text: email"></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script src="/javascripts/knockout.js"></script>
<script>
    function StudentViewModel() {
        var self = this;

        self.students = ko.observableArray([]);
        self.searchQuery = ko.observable("");

        self.filteredStudents = ko.computed(function () {
            var search = self.searchQuery().toLowerCase();
            if (!search) {
                return self.students();
            } else {
                return ko.utils.arrayFilter(self.students(), function (student) {
                    return student.id.toLowerCase().includes(search) || student.name.toLowerCase().includes(search);
                });
            }
        });

        self.fetchStudents = async function () {
            try {
                const apiUrl = "https://localhost:7209/api/Student";
                const response = await fetch(apiUrl);
                if (!response.ok) throw new Error("Failed to fetch students");
                const data = await response.json();
                self.students(data);
            } catch (error) {
                console.error("Error fetching students:", error);
            }
        };

        self.fetchStudents();
    }

    ko.applyBindings(new StudentViewModel());
</script>
