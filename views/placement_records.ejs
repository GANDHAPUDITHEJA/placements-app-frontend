<div class="bg-white p-6 rounded-lg shadow-md">
    <h2 class="text-2xl font-semibold text-gray-700 mb-4">Placement Records</h2>

    <!-- Search Bar -->
    <input type="text" data-bind="value: searchQuery, valueUpdate: 'input'"
        placeholder="Search by Student ID, Name, or Company"
        class="w-full p-2 mb-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">

    <!-- Applications Table -->
    <div class="overflow-x-auto">
        <table class="w-full border-collapse border border-gray-300">
            <thead>
                <tr class="bg-gray-200">
                    <th class="border border-gray-300 px-4 py-2">Student ID</th>
                    <th class="border border-gray-300 px-4 py-2">Student Name</th>
                    <th class="border border-gray-300 px-4 py-2">Company</th>
                    <th class="border border-gray-300 px-4 py-2">Job Title</th>
                    <th class="border border-gray-300 px-4 py-2">Status</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: filteredApplications">
                <tr class="bg-white hover:bg-gray-100">
                    <td class="border border-gray-300 px-4 py-2" data-bind="text: studentId"></td>
                    <td class="border border-gray-300 px-4 py-2" data-bind="text: studentName"></td>
                    <td class="border border-gray-300 px-4 py-2" data-bind="text: companyName"></td>
                    <td class="border border-gray-300 px-4 py-2" data-bind="text: jobTitle"></td>
                    <td class="border border-gray-300 px-4 py-2 font-semibold"
                        data-bind="text: applicationStatus, css: statusClass">
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script src="/javascripts/knockout.js"></script>
<script>
    function PlacementRecordsViewModel() {
        var self = this;

        self.applications = ko.observableArray([]);  // Holds all applications
        self.searchQuery = ko.observable("");        // Search input

        // Computed observable for filtering
        self.filteredApplications = ko.computed(function () {
            var search = self.searchQuery().toLowerCase();
            if (!search) return self.applications();
            return ko.utils.arrayFilter(self.applications(), function (app) {
                return app.studentId.toLowerCase().includes(search) ||
                    app.studentName.toLowerCase().includes(search) ||
                    app.companyName.toLowerCase().includes(search);
            });
        });

        // Fetch applications from API
        self.fetchApplications = async function () {
            try {
                const apiUrl = "https://localhost:7209/api/Application";
                const response = await fetch(apiUrl);
                if (!response.ok) throw new Error("Failed to fetch applications");
                const data = await response.json();

                // Ensure each application has a computed status class
                const applicationsWithComputedStatus = data.map(app => ({
                    ...app,
                    statusClass: ko.observable(self.getStatusClass(app.applicationStatus))
                }));

                self.applications(applicationsWithComputedStatus);  // Populate applications list
            } catch (error) {
                console.error("Error fetching applications:", error);
            }
        };

        // Function to determine status class
        self.getStatusClass = function (status) {
            if (!status) return "text-gray-700";
            switch (status.toLowerCase()) {
                case "pending": return "text-yellow-500";
                case "selected": return "text-green-500";
                case "rejected": return "text-red-500";
                case "interviewscheduled": return "text-blue-500";
                default: return "text-gray-700";
            }
        };

        self.fetchApplications(); // Call function on load
    }

    ko.applyBindings(new PlacementRecordsViewModel()); // Activate Knockout.js
</script>
